mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(tweet=n())
likes_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nlikes=sum(nlikes))
retweet_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nretweets = sum(nretweets))
nreplies_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nreplies = sum(nreplies))
#removing year 2022
nreplies_year= nreplies_year[-c(12), ]
retweet_year= retweet_year[-c(12), ]
likes_year= likes_year[-c(12), ]
tweets_year = tweets_year[-c(12), ]
Replies = nreplies_year$nreplies
Likes =  likes_year$nlikes
Retweets = retweet_year$nretweets
summary(cbind(Replies, Retweets, Likes))
#numeric
nreplies_year$nreplies= as.numeric(nreplies_year$nreplies)
nreplies_year$yr= as.numeric(nreplies_year$yr)
retweet_year$yr = as.numeric(retweet_year$yr)
retweet_year$nretweets = as.numeric(retweet_year$nretweets)
likes_year$yr = as.numeric(likes_year$yr)
likes_year$nlikes = as.numeric(likes_year$nlikes)
tweets_year$yr = as.numeric(tweets_year$yr)
tweets_year$tweet = as.numeric(tweets_year$tweet)
#plot
tweets <- ggplot(data = tweets_year, aes(x = yr, y = tweet)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "purple", color = "black") +
xlab("Year") +
ylab("Number of tweets")  +
ggtitle("Tweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
likes <- ggplot(data = likes_year, aes(x = yr, y = nlikes)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "darkorange", color = "black") +
xlab("Year") +
ylab("Number of likes")  +
ggtitle("Likes per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
retweets <- ggplot(data =retweet_year, aes(x = yr, y = nretweets), color ="darkorange") +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "dark green", color = "black") +
xlab("Year") +
ylab("Number of retweets") +
ggtitle("Retweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
replies <- ggplot(data = nreplies_year, aes(x = yr, y = nreplies)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill ="dark red", color ="black") +
xlab("Year") +
ylab("Number of replies")  +
ggtitle("Replies per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
ggarrange(tweets, likes, retweets, replies,
ncol = 2, nrow = 2)
#subsetting in order to undersand tweet share
elondoge = elon[grepl("dogecoin", elon[["tweet"]]) | grepl("Doge", elon[["tweet"]]) | grepl("doge", elon[["tweet"]]),]
elonCryptoOnly = elon[grepl("crypto", elon[["tweet"]]) | grepl("Crypto", elon[["tweet"]]) | grepl("cryptos", elon[["tweet"]]),]
elonBTC = elon[grepl("BTC", elon[["tweet"]])| grepl("Bitcoin", elon[["tweet"]])| grepl("bitcoin", elon[["tweet"]]),]
n_doge = length(elondoge$tweet)
n_onlycrypto = length(elonCryptoOnly$tweet)
n_BTC = length(elonCryptoOnly$tweet)
n_totaltweet = n_doge + n_onlycrypto + n_BTC
#vector
vectorshare = c(n_doge, n_onlycrypto, n_BTC)
vectorshare= as.data.frame(vectorshare)
dim(vectorshare)
colnames(vectorshare) = c("tweetcount")
rownames(vectorshare) = c("doge", "crypto", "BTC")
#counting total nlikes, nreplies, nretweet per each keyword to understand where is the maximum activity
## like
n_dogelikes = mean(elondoge$nlikes)
n_onlycrptolikes = mean(elonCryptoOnly$nlikes)
n_BTClike = mean(elonBTC$nlikes)
n_totallike = mean(elon$nlikes)
##retweet
n_dogeretweet = mean(elondoge$nretweets)
n_onlycrptoretweet = mean(elonCryptoOnly$nretweets)
n_BTCretweet = mean(elonBTC$nretweets)
n_totalretweet = mean(elon$nretweets)
##reply
n_dogereply = mean(elondoge$nreplies)
n_onlycrptoreply = mean(elonCryptoOnly$nreplies)
n_BTClreply= mean(elonBTC$nreplies)
n_totalreply = mean(elon$nreplies)
#dataframe activity
vectoractivity_doge= c(n_dogelikes, n_dogereply, n_dogeretweet)
vectoractivity_BTC= c(n_BTClike, n_BTClreply, n_BTCretweet)
vectoractivity_crypto = c(n_onlycrptolikes, n_onlycrptoreply, n_onlycrptoretweet)
vectoractivity_total = c(n_totallike, n_totalreply, n_totalretweet)
dfactivity = cbind(vectoractivity_doge, vectoractivity_crypto, vectoractivity_BTC, vectoractivity_total)
dfactivity = t(dfactivity)
dfactivity = as.data.frame(dfactivity)
dfactivity$crypto = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
rownames(dfactivity) = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
colnames(dfactivity) = c("Likes", "Replies", "Retweets", "Total")
ggplot(data = vectorshare, aes(x = tweetcount, y = rownames(vectorshare))) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "darkorange", color = "black") +
xlab("Year") +
ylab("Number of likes")  +
ggtitle("Likes per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#plotting
dfactivity %>%
gather(key, value, -Total) %>%
ggplot(aes(x=Total, y=value, fill = key)) +
geom_col(position = "dodge") +
theme_minimal()
# install.packages("devtools")
#devtools::install_github("sstoeckl/crypto2", force=TRUE)
#take daily hist of BTC
coins <- crypto_list(only_active=TRUE)
btc_hist <- crypto_history(coins, limit=1, start_date="20110101", end_date="20220131")
as.data.frame(btc_hist)
btc_hist$timestamp <- format(as.POSIXct(btc_hist$timestamp,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
btc_hist$timestamp <- as.Date(as.character(btc_hist$timestamp), format='%m/%d/%Y')
#subset tweets keeping those that contains ("bitcoin","crypto")
eloncrypto <- elon[grepl("crypto", elon[["tweet"]]) | grepl("BTC", elon[["tweet"]]),]
as.data.frame(eloncrypto)
eloncrypto$date <- format(as.POSIXct(eloncrypto$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
eloncrypto$date <- as.Date(as.character(eloncrypto$date), format='%m/%d/%Y')
btc_hist['tweet'] <- btc_hist$timestamp %in% eloncrypto$date
btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3) +
ggtitle("Elon Musk's Tweets and Bitcoin Volatility") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
corpus <- iconv(elon$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:10])
#stemming = reduce to root form
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
words <- rowSums(tdm)
words <- subset(words, words>=120)
words <- as.data.frame(words)
words$names <- rownames(words)
ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(25, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
#plot
tweets <- ggplot(data = tweets_year, aes(x = yr, y = tweet)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "purple", color = "black") +
xlab("Year") +
ylab("Number of tweets")  +
ggtitle("Tweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
likes <- ggplot(data = likes_year, aes(x = yr, y = nlikes)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "darkorange", color = "black") +
xlab("Year") +
ylab("Number of likes")  +
ggtitle("Likes per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
retweets <- ggplot(data =retweet_year, aes(x = yr, y = nretweets), color ="darkorange") +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "dark green", color = "black") +
xlab("Year") +
ylab("Number of retweets") +
ggtitle("Retweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
replies <- ggplot(data = nreplies_year, aes(x = yr, y = nreplies)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill ="dark red", color ="black") +
xlab("Year") +
ylab("Number of replies")  +
ggtitle("Replies per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
ggarrange(tweets, likes, retweets, replies,
ncol = 2, nrow = 2)
#plot
tweets <- ggplot(data = tweets_year, aes(x = yr, y = tweet)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "purple", color = "black") +
xlab("Year") +
ylab("Number of tweets")  +
ggtitle("Tweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
likes <- ggplot(data = likes_year, aes(x = yr, y = nlikes)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "darkorange", color = "black") +
xlab("Year") +
ylab("Number of likes")  +
ggtitle("Likes per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
retweets <- ggplot(data =retweet_year, aes(x = yr, y = nretweets), color ="darkorange") +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "dark green", color = "black") +
xlab("Year") +
ylab("Number of retweets") +
ggtitle("Retweets per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
replies <- ggplot(data = nreplies_year, aes(x = yr, y = nreplies)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill ="dark red", color ="black") +
xlab("Year") +
ylab("Number of replies")  +
ggtitle("Replies per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
ggarrange(tweets, likes, retweets, replies,
ncol = 2, nrow = 2)
#plot
library(ggplot2)
#subsetting in order to undersand tweet share
elondoge = elon[grepl("dogecoin", elon[["tweet"]]) | grepl("Doge", elon[["tweet"]]) | grepl("doge", elon[["tweet"]]),]
elonCryptoOnly = elon[grepl("crypto", elon[["tweet"]]) | grepl("Crypto", elon[["tweet"]]) | grepl("cryptos", elon[["tweet"]]),]
elonBTC = elon[grepl("BTC", elon[["tweet"]])| grepl("Bitcoin", elon[["tweet"]])| grepl("bitcoin", elon[["tweet"]]),]
n_doge = length(elondoge$tweet)
n_onlycrypto = length(elonCryptoOnly$tweet)
n_BTC = length(elonCryptoOnly$tweet)
n_totaltweet = n_doge + n_onlycrypto + n_BTC
#vector
vectorshare = c(n_doge, n_onlycrypto, n_BTC)
vectorshare= as.data.frame(vectorshare)
dim(vectorshare)
colnames(vectorshare) = c("tweetcount")
rownames(vectorshare) = c("doge", "crypto", "BTC")
#counting total nlikes, nreplies, nretweet per each keyword to understand where is the maximum activity
## like
n_dogelikes = mean(elondoge$nlikes)
n_onlycrptolikes = mean(elonCryptoOnly$nlikes)
n_BTClike = mean(elonBTC$nlikes)
n_totallike = mean(elon$nlikes)
##retweet
n_dogeretweet = mean(elondoge$nretweets)
n_onlycrptoretweet = mean(elonCryptoOnly$nretweets)
n_BTCretweet = mean(elonBTC$nretweets)
n_totalretweet = mean(elon$nretweets)
##reply
n_dogereply = mean(elondoge$nreplies)
n_onlycrptoreply = mean(elonCryptoOnly$nreplies)
n_BTClreply= mean(elonBTC$nreplies)
n_totalreply = mean(elon$nreplies)
#dataframe activity
vectoractivity_doge= c(n_dogelikes, n_dogereply, n_dogeretweet)
vectoractivity_BTC= c(n_BTClike, n_BTClreply, n_BTCretweet)
vectoractivity_crypto = c(n_onlycrptolikes, n_onlycrptoreply, n_onlycrptoretweet)
vectoractivity_total = c(n_totallike, n_totalreply, n_totalretweet)
dfactivity = cbind(vectoractivity_doge, vectoractivity_crypto, vectoractivity_BTC, vectoractivity_total)
dfactivity = t(dfactivity)
dfactivity = as.data.frame(dfactivity)
dfactivity$crypto = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
rownames(dfactivity) = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
colnames(dfactivity) = c("Likes", "Replies", "Retweets", "Total")
ggplot(data = vectorshare, aes(x = tweetcount, y = rownames(vectorshare))) +
geom_bar(stat = "identity", width = 0.5, position = "dodge", fill = "darkorange", color = "black") +
xlab("Year") +
ylab("Number of likes")  +
ggtitle("Likes per year") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
#subsetting in order to undersand tweet share
elondoge = elon[grepl("dogecoin", elon[["tweet"]]) | grepl("Doge", elon[["tweet"]]) | grepl("doge", elon[["tweet"]]),]
elonCryptoOnly = elon[grepl("crypto", elon[["tweet"]]) | grepl("Crypto", elon[["tweet"]]) | grepl("cryptos", elon[["tweet"]]),]
elonBTC = elon[grepl("BTC", elon[["tweet"]])| grepl("Bitcoin", elon[["tweet"]])| grepl("bitcoin", elon[["tweet"]]),]
n_doge = length(elondoge$tweet)
n_onlycrypto = length(elonCryptoOnly$tweet)
n_BTC = length(elonCryptoOnly$tweet)
n_totaltweet = n_doge + n_onlycrypto + n_BTC
#vector
vectorshare = c(n_doge, n_onlycrypto, n_BTC)
vectorshare= as.data.frame(vectorshare)
dim(vectorshare)
colnames(vectorshare) = c("tweetcount")
rownames(vectorshare) = c("doge", "crypto", "BTC")
#counting total nlikes, nreplies, nretweet per each keyword to understand where is the maximum activity
## like
n_dogelikes = mean(elondoge$nlikes)
n_onlycrptolikes = mean(elonCryptoOnly$nlikes)
n_BTClike = mean(elonBTC$nlikes)
n_totallike = mean(elon$nlikes)
##retweet
n_dogeretweet = mean(elondoge$nretweets)
n_onlycrptoretweet = mean(elonCryptoOnly$nretweets)
n_BTCretweet = mean(elonBTC$nretweets)
n_totalretweet = mean(elon$nretweets)
##reply
n_dogereply = mean(elondoge$nreplies)
n_onlycrptoreply = mean(elonCryptoOnly$nreplies)
n_BTClreply= mean(elonBTC$nreplies)
n_totalreply = mean(elon$nreplies)
#dataframe activity
vectoractivity_doge= c(n_dogelikes, n_dogereply, n_dogeretweet)
vectoractivity_BTC= c(n_BTClike, n_BTClreply, n_BTCretweet)
vectoractivity_crypto = c(n_onlycrptolikes, n_onlycrptoreply, n_onlycrptoretweet)
vectoractivity_total = c(n_totallike, n_totalreply, n_totalretweet)
dfactivity = cbind(vectoractivity_doge, vectoractivity_crypto, vectoractivity_BTC, vectoractivity_total)
dfactivity = t(dfactivity)
dfactivity = as.data.frame(dfactivity)
dfactivity$crypto = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
rownames(dfactivity) = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
colnames(dfactivity) = c("Likes", "Replies", "Retweets", "Total")
dfactivity %>%
gather(key, value, -Total) %>%
ggplot(aes(x=Total, y=value, fill = key)) +
geom_col(position = "dodge") +
theme_minimal()
#subsetting in order to undersand tweet share
elondoge = elon[grepl("dogecoin", elon[["tweet"]]) | grepl("Doge", elon[["tweet"]]) | grepl("doge", elon[["tweet"]]),]
elonCryptoOnly = elon[grepl("crypto", elon[["tweet"]]) | grepl("Crypto", elon[["tweet"]]) | grepl("cryptos", elon[["tweet"]]),]
elonBTC = elon[grepl("BTC", elon[["tweet"]])| grepl("Bitcoin", elon[["tweet"]])| grepl("bitcoin", elon[["tweet"]]),]
n_doge = length(elondoge$tweet)
n_onlycrypto = length(elonCryptoOnly$tweet)
n_BTC = length(elonCryptoOnly$tweet)
n_totaltweet = n_doge + n_onlycrypto + n_BTC
#vector
vectorshare = c(n_doge, n_onlycrypto, n_BTC)
vectorshare= as.data.frame(vectorshare)
dim(vectorshare)
colnames(vectorshare) = c("tweetcount")
rownames(vectorshare) = c("doge", "crypto", "BTC")
#counting total nlikes, nreplies, nretweet per each keyword to understand where is the maximum activity
## like
n_dogelikes = mean(elondoge$nlikes)
n_onlycrptolikes = mean(elonCryptoOnly$nlikes)
n_BTClike = mean(elonBTC$nlikes)
n_totallike = mean(elon$nlikes)
##retweet
n_dogeretweet = mean(elondoge$nretweets)
n_onlycrptoretweet = mean(elonCryptoOnly$nretweets)
n_BTCretweet = mean(elonBTC$nretweets)
n_totalretweet = mean(elon$nretweets)
##reply
n_dogereply = mean(elondoge$nreplies)
n_onlycrptoreply = mean(elonCryptoOnly$nreplies)
n_BTClreply= mean(elonBTC$nreplies)
n_totalreply = mean(elon$nreplies)
#dataframe activity
vectoractivity_doge= c(n_dogelikes, n_dogereply, n_dogeretweet)
vectoractivity_BTC= c(n_BTClike, n_BTClreply, n_BTCretweet)
vectoractivity_crypto = c(n_onlycrptolikes, n_onlycrptoreply, n_onlycrptoretweet)
vectoractivity_total = c(n_totallike, n_totalreply, n_totalretweet)
dfactivity = cbind(vectoractivity_doge, vectoractivity_crypto, vectoractivity_BTC, vectoractivity_total)
dfactivity = t(dfactivity)
dfactivity = as.data.frame(dfactivity)
dfactivity$crypto = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
rownames(dfactivity) = c("ActivityDoge", "ActivityCrypto", "ActivityBTC", "TotalActivity")
colnames(dfactivity) = c("Likes", "Replies", "Retweets", "Total")
dfactivity %>%
gather(key, value, -Total) %>%
ggplot(aes(x=Total, y=value, fill = key)) +
geom_col(position = "dodge") +
theme_minimal()
# install.packages("devtools")
#devtools::install_github("sstoeckl/crypto2", force=TRUE)
#take daily hist of BTC
coins <- crypto_list(only_active=TRUE)
btc_hist <- crypto_history(coins, limit=1, start_date="20110101", end_date="20220131")
as.data.frame(btc_hist)
btc_hist$timestamp <- format(as.POSIXct(btc_hist$timestamp,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
btc_hist$timestamp <- as.Date(as.character(btc_hist$timestamp), format='%m/%d/%Y')
#subset tweets keeping those that contains ("bitcoin","crypto")
eloncrypto <- elon[grepl("crypto", elon[["tweet"]]) | grepl("BTC", elon[["tweet"]]),]
as.data.frame(eloncrypto)
eloncrypto$date <- format(as.POSIXct(eloncrypto$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
eloncrypto$date <- as.Date(as.character(eloncrypto$date), format='%m/%d/%Y')
btc_hist['tweet'] <- btc_hist$timestamp %in% eloncrypto$date
btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3) +
ggtitle("Elon Musk's Tweets and Bitcoin Volatility") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
# install.packages("devtools")
#devtools::install_github("sstoeckl/crypto2", force=TRUE)
#take daily hist of BTC
coins <- crypto_list(only_active=TRUE)
btc_hist <- crypto_history(coins, limit=1, start_date="20110101", end_date="20220131")
as.data.frame(btc_hist)
btc_hist$timestamp <- format(as.POSIXct(btc_hist$timestamp,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
btc_hist$timestamp <- as.Date(as.character(btc_hist$timestamp), format='%m/%d/%Y')
#subset tweets keeping those that contains ("bitcoin","crypto")
eloncrypto <- elon[grepl("crypto", elon[["tweet"]]) | grepl("BTC", elon[["tweet"]]),]
as.data.frame(eloncrypto)
eloncrypto$date <- format(as.POSIXct(eloncrypto$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
eloncrypto$date <- as.Date(as.character(eloncrypto$date), format='%m/%d/%Y')
btc_hist['tweet'] <- btc_hist$timestamp %in% eloncrypto$date
btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3) +
ggtitle("Elon Musk's Tweets and Bitcoin Volatility") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal()
corpus <- iconv(elon$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:10])
#stemming = reduce to root form
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
words <- rowSums(tdm)
words <- subset(words, words>=120)
words <- as.data.frame(words)
words$names <- rownames(words)
sentwords1 = ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
corpus <- iconv(elon$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:10])
#stemming = reduce to root form
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
words <- rowSums(tdm)
words <- subset(words, words>=120)
words <- as.data.frame(words)
words$names <- rownames(words)
ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
graph <- ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
graph <- ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
remove(graph)
sentiwords1 <- ggplot(data=words, aes(x=reorder(names, words), y=words)) +
labs(y = "Words", x = "Count", title = "Word frequency") +
geom_bar(stat="identity", aes(fill=words)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
sentiwords1
ggplot(data=words1, aes(x=reorder(names, words1), y=words1)) +
geom_bar(stat="identity", aes(fill=words1)) +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
scale_fill_gradient2(low = "blue", high = "darkblue") +
coord_flip() +
theme_minimal()
plot(densitySentiments,main='Density of sentiments')
polygon(densitySentiments,col='red')
