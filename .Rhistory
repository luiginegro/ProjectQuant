btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3)
if(!require(SentimentAnalysis)) install.packages("SentimentAnalysis")
library(SentimentAnalysis)
library(RColorBrewer)
library(wordcloud)
install.packages("wordcloud")
if(!require(dplyr)) install.packages("dplyr")
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(readxl)) install.packages("readxl")
#library(readxl)
elon =  read.csv("elon.csv")
dim(elon)
head(elon)
#create a dataset for analysing popularity
popularity = as.data.frame(cbind(elon$tweet, elon$nlikes, elon$nreplies, elon$nretweets, elon$date))
#change the col names
colnames(popularity) = c("tweet", "nlikes","nreplies", "nretweets", "date")
#Showing summaries of each variable
library(ggplot2)
library(dplyr)
#install.packages("hrbrthemes")
popularity$date <- format(as.POSIXct(popularity$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
popularity$date <- as.Date(as.character(popularity$date), format='%m/%d/%Y')
popularity$nreplies= as.numeric(popularity$nreplies)
popularity$nretweets= as.numeric(popularity$nretweets)
popularity$nlikes= as.numeric(popularity$nlikes)
#grouping by year
library(dplyr)
likes_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nlikes=sum(nlikes))
retweet_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nretweets = sum(nretweets))
nreplies_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nreplies = sum(nreplies))
#removing year 2022
nreplies_year= nreplies_year[-c(12), ]
retweet_year= retweet_year[-c(12), ]
likes_year= likes_year[-c(12), ]
library(ggplot2)
library(dplyr)
if(!require(hrbrthemes)) install.packages("hrbrthemes")
library(hrbrthemes)
#numeric
nreplies_year$nreplies= as.numeric(nreplies_year$nreplies)
nreplies_year$yr= as.numeric(nreplies_year$yr)
retweet_year$yr = as.numeric(retweet_year$yr)
retweet_year$nretweets = as.numeric(retweet_year$nretweets)
likes_year$yr = as.numeric(likes_year$yr)
likes_year$nlikes = as.numeric(likes_year$nlikes)
#plot
library(ggplot2)
#install.packages("ggthemes")
library(ggthemes)
# Produce a bar chart
library(ggplot2)
library(ggthemes)
ggplot(data = likes_year, aes(x = yr, y = nlikes)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of likes")  +
labs(fill = "Isic Code")  +
theme_minimal() +
scale_fill_brewer(direction = -1)
ggplot(data =retweet_year, aes(x = yr, y = nretweets)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of retweets") +
theme_minimal() +
scale_fill_brewer(direction = -1)
ggplot(data = nreplies_year, aes(x = yr, y = nreplies)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of replies")  +
theme_minimal() +
scale_fill_brewer(direction = -1)
# install.packages("devtools")
#devtools::install_github("sstoeckl/crypto2", force=TRUE)
library(crypto2)
library(dplyr)
library(lubridate)
#take daily hist of BTC
coins <- crypto_list(only_active=TRUE)
btc_hist <- crypto_history(coins, limit=1, start_date="20110101", end_date="20220131")
library(stringr)
as.data.frame(btc_hist)
btc_hist$timestamp <- format(as.POSIXct(btc_hist$timestamp,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
btc_hist$timestamp <- as.Date(as.character(btc_hist$timestamp), format='%m/%d/%Y')
#subset tweets keeping those that contains ("bitcoin","crypto")
eloncrypto <- elon[grepl("crypto", elon[["tweet"]]) | grepl("BTC", elon[["tweet"]]),]
as.data.frame(eloncrypto)
eloncrypto$date <- format(as.POSIXct(eloncrypto$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
eloncrypto$date <- as.Date(as.character(eloncrypto$date), format='%m/%d/%Y')
btc_hist['tweet'] <- btc_hist$timestamp %in% eloncrypto$date
library(ggplot2)
btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3)
library(wordcloud)
txt <- elon$tweet
txt <- sapply(txt, function(x) iconv(x, to='UTF-8-MAC', sub='byte'))
#txt <- sapply(txt, function(x) iconv(x, to='UTF-8-MAC', sub='byte'))
#for Windows based OS
txt <- sapply(txt,function(row) iconv(row, "latin1", "ASCII", sub=""))
#remove punctuation
txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", txt)
# remove at people
txt = gsub("@\\w+", "", txt)
# remove punctuation
txt = gsub("[[:punct:]]", "", txt)
# remove numbers
txt = gsub("[[:digit:]]", "", txt)
# remove html links
txt = gsub("http\\w+", "", txt)
# remove unnecessary spaces
txt = gsub("[ \t]{2,}", "", txt)
txt = gsub("^\\s+|\\s+$", "", txt)
txt = txt[!is.na(txt)]
names(txt) = NULL
# classify emotion
class_emo = classify_emotion(some_txt, algorithm="bayes", prior=1.0)
if(!require(tm)) install.packages("tm")
library(tm)
corpus <- iconv(elon$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:10])
#stemming = reduce to root form
cleanset <- tm_map(cleanset, stripWhitespace)
#stemming = reduce to root form
cleanset <- tm_map(cleanset, stripWhitespace)
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
words <- rowSums(tdm)
words <- subset(words, words>=100)
barplot(words,
las = 2,
col = rainbow(50))
library(wordcloud)
w <- sort(rowSums(tdm), decreasing = TRUE)
set.seed(222)
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(8, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
w <- sort(rowSums(tdm), decreasing = TRUE)
set.seed(222)
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(8, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(8, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
if(!require(wordcloud2)) install.packages("wordcloud2")
library(wordcloud2)
w <- data.frame(names(w), w)
colnames(w) <- c('word', 'freq')
wordcloud2(w,
size = 0.7,
shape = 'rectangle',
rotateRatio = 0.5,
minSize = 1)
w <- data.frame(names(w), w)
library(wordcloud2)
w <- data.frame(names(w), w)
w <- data.frame(names(w), w)
colnames(w) <- c('word', 'freq')
wordcloud2(w,
size = 0.7,
shape = 'rectangle',
rotateRatio = 0.5,
minSize = 1)
w <- data.frame(names(w), w)
w <- sort(rowSums(tdm), decreasing = TRUE)
set.seed(222)
w <- data.frame(names(w), w)
colnames(w) <- c('word', 'freq')
wordcloud2(w,
size = 0.7,
shape = 'rectangle',
rotateRatio = 0.5,
minSize = 1)
library(syuzhet)
install.packages("syuzhet")
library(lubridate)
library(ggplot2)
library(scales)
library(reshape2)
library(dplyr)
s <- get_nrc_sentiment(elon$tweet)
library(syuzhet)
s <- get_nrc_sentiment(elon$tweet)
head(s)
barplot(colSums(s),
las = 2,
col = rainbow(10),
ylab = 'Count',
main = 'Sentiment Scores Tweets')
elon =  read.csv("elon.csv")
dim(elon)
head(elon)
popularity = as.data.frame(cbind(elon$tweet, elon$nlikes, elon$nreplies, elon$nretweets, elon$date))
#change the col names
colnames(popularity) = c("tweet", "nlikes","nreplies", "nretweets", "date")
library(ggplot2)
library(ggplot2)
library(dplyr)
popularity$date <- format(as.POSIXct(popularity$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
popularity$date <- as.Date(as.character(popularity$date), format='%m/%d/%Y')
popularity$nreplies= as.numeric(popularity$nreplies)
popularity$nretweets= as.numeric(popularity$nretweets)
popularity$nlikes= as.numeric(popularity$nlikes)
library(dplyr)
likes_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nlikes=sum(nlikes))
retweet_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nretweets = sum(nretweets))
nreplies_year <- popularity %>%
mutate(dates = as.Date(popularity$date)) %>%
mutate(yr = format(dates, '%Y')) %>%
group_by(yr) %>%
summarise(nreplies = sum(nreplies))
nreplies_year= nreplies_year[-c(12), ]
retweet_year= retweet_year[-c(12), ]
likes_year= likes_year[-c(12), ]
if(!require(hrbrthemes)) install.packages("hrbrthemes")
library(hrbrthemes)
nreplies_year$nreplies= as.numeric(nreplies_year$nreplies)
nreplies_year$yr= as.numeric(nreplies_year$yr)
retweet_year$yr = as.numeric(retweet_year$yr)
retweet_year$nretweets = as.numeric(retweet_year$nretweets)
likes_year$yr = as.numeric(likes_year$yr)
likes_year$nlikes = as.numeric(likes_year$nlikes)
#install.packages("ggthemes")
library(ggthemes)
ggplot(data = likes_year, aes(x = yr, y = nlikes)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of likes")  +
labs(fill = "Isic Code")  +
theme_minimal() +
scale_fill_brewer(direction = -1)
ggplot(data =retweet_year, aes(x = yr, y = nretweets)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of retweets") +
theme_minimal() +
scale_fill_brewer(direction = -1)
ggplot(data = nreplies_year, aes(x = yr, y = nreplies)) +
geom_bar(stat = "identity", width = 0.5, position = "dodge") +
xlab("Year") +
ylab("Number of replies")  +
theme_minimal() +
scale_fill_brewer(direction = -1)
# install.packages("devtools")
#devtools::install_github("sstoeckl/crypto2", force=TRUE)
library(crypto2)
library(dplyr)
library(lubridate)
#take daily hist of BTC
coins <- crypto_list(only_active=TRUE)
btc_hist <- crypto_history(coins, limit=1, start_date="20110101", end_date="20220131")
as.data.frame(btc_hist)
btc_hist$timestamp <- format(as.POSIXct(btc_hist$timestamp,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
btc_hist$timestamp <- as.Date(as.character(btc_hist$timestamp), format='%m/%d/%Y')
#subset tweets keeping those that contains ("bitcoin","crypto")
eloncrypto <- elon[grepl("crypto", elon[["tweet"]]) | grepl("BTC", elon[["tweet"]]),]
as.data.frame(eloncrypto)
eloncrypto$date <- format(as.POSIXct(eloncrypto$date,format="%Y-%m-%d %H:%M:%OS"),format='%m/%d/%Y')
eloncrypto$date <- as.Date(as.character(eloncrypto$date), format='%m/%d/%Y')
btc_hist['tweet'] <- btc_hist$timestamp %in% eloncrypto$date
btc_hist %>%
ggplot(aes(x = timestamp, y = open)) +
geom_line() +
geom_point(data = . %>% filter(tweet == TRUE), color = "deeppink", size = 3)
library(tm)
library(RColorBrewer)
library(wordcloud)
corpus <- iconv(elon$tweet)
corpus <- Corpus(VectorSource(corpus))
inspect(corpus[1:5])
#clean
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
cleanset <- tm_map(corpus, removeWords, stopwords('english'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
cleanset <- tm_map(cleanset, content_transformer(removeURL))
inspect(cleanset[1:10])
inspect(cleanset[1:5])
tdm <- TermDocumentMatrix(cleanset)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
words <- rowSums(tdm)
words <- subset(words, words>=100)
barplot(words,
las = 2,
col = rainbow(50))
w <- sort(rowSums(tdm), decreasing = TRUE)
set.seed(222)
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(8, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
library(wordcloud)
w <- sort(rowSums(tdm), decreasing = TRUE)
set.seed(222)
wordcloud(words = names(w),
freq = w,
max.words = 150,
random.order = F,
min.freq = 5,
colors = brewer.pal(8, 'Dark2'),
scale = c(5, 0.3),
rot.per = 0.7)
library(wordcloud2)
w <- data.frame(names(w), w)
colnames(w) <- c('word', 'freq')
wordcloud2(w,
size = 0.7,
shape = 'rectangle',
rotateRatio = 0.5,
minSize = 1)
library(syuzhet)
library(lubridate)
library(ggplot2)
library(scales)
library(reshape2)
library(dplyr)
s <- get_nrc_sentiment(elon$tweet)
s <- get_nrc_sentiment(elon$tweet)
head(s)
barplot(colSums(s),
las = 2,
col = rainbow(10),
ylab = 'Count',
main = 'Sentiment Scores Tweets')
library(devtools)
library(devtools)
install_github("trinker/sentimentr")
txt <- elon$tweet
txt <- sapply(txt, function(x) iconv(x, to='UTF-8-MAC', sub='byte'))
#for Windows based OS
txt <- sapply(txt,function(row) iconv(row, "latin1", "ASCII", sub=""))
#remove punctuation
txt = gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", txt)
# remove at people
txt = gsub("@\\w+", "", txt)
# remove punctuation
txt = gsub("[[:punct:]]", "", txt)
# remove numbers
txt = gsub("[[:digit:]]", "", txt)
# remove html links
txt = gsub("http\\w+", "", txt)
# remove unnecessary spaces
txt = gsub("[ \t]{2,}", "", txt)
txt = gsub("^\\s+|\\s+$", "", txt)
txt = txt[!is.na(txt)]
names(txt) = NULL
library(sentimentr)
sentiment_by(txt)
attributes(t)$count
#Sentiment density plot
library(e1071)
txt %>%
get_sentences() %>%
sentiment() %>%
filter(sentiment!=0) -> senti
txt %>%
get_sentences() %>%
sentiment() %>%
filter(sentiment!=0) -> senti
densitySentiments <- density(senti$sentiment)
mean(senti$sentiment)
skewness(senti$sentiment)
plot(densitySentiments,main='Density of sentiments')
polygon(densitySentiments,col='red')
e<-emotion_by(get_sentences(txt),drop.unused.emotions=TRUE)
e<-emotion_by(get_sentences(txt),drop.unused.emotions=TRUE)
plot(e)
plot(btc_hist$timestamp,btc_hist$open,
type='l',col='red',
xlab = "time (t)",
ylab = "Y(t)",
main = "Trend signal")
acf(btc_hist$open,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
plot(btc_hist$timestamp,btc_hist$open,
type='l',col='red',
xlab = "time (t)",
ylab = "Y(t)",
main = "Trend signal")
acf(btc_hist$open,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
if(!require(tseries)) install.packages("tseries")
library(tseries)
adf.test(btc_hist$open)
btc_hist['log'] = log(btc_hist$open)
plot(btc_hist$timestamp,btc_hist$log,
type='l',col='red',
xlab = "time (t)",
ylab = "Y(t)",
main = "Trend signal")
acf(btc_hist$log,lag.max = length(btc_hist$log),
xlab = "lag #", ylab = 'ACF', main=' ')
adf.test(btc_hist$log)
diff = diff(btc_hist$open)
logdiff = diff(btc_hist$log)
plot(btc_hist$timestamp[2:3200],diff,
type='l',col='red',
xlab = "time (t)",
ylab = "Y(t)",
main = "Trend signal")
acf(diff,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
plot(btc_hist$timestamp[2:3200],logdiff,
type='l',col='red',
xlab = "time (t)",
ylab = "Y(t)",
main = "Trend signal")
acf(logdiff,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
adf.test(diff)
acf(logdiff,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
acf(logdiff,lag.max = length(btc_hist$open),
xlab = "lag #", ylab = 'ACF', main=' ')
adf.test(diff)
if(!require(changepoint)) install.packages("changepoint")
if(!require(changepoint)) install.packages("changepoint")
if(!require(sarbcurrent)) install.packages("sarbcurrent")
library(lubridate)
m_binseg <- cpt.mean(diff, penalty = "BIC", method = "BinSeg", Q = 15)
plot(m_binseg, type = "l", xlab = "Index", cpt.width = 4)
cpts(m_binseg)
plot(m_binseg, type = "l", xlab = "Index", cpt.width = 4)
#all the changes happen from 2500 onwards approx, try to subset plot
m_binseg <- cpt.mean(diff[2500:3199], penalty = "BIC", method = "BinSeg", Q = 15)
plot(m_binseg, type = "l", xlab = "Index", cpt.width = 4)
#segmented neighbout
m_segneigh <- cpt.mean(diff[2500:3199], penalty = "BIC", method = "SegNeigh", Q = 50)
#segmented neighbout
m_segneigh <- cpt.mean(diff[2500:3199], penalty = "BIC", method = "SegNeigh", Q = 50)
plot(m_segneigh, type = "l", xlab = "Index", cpt.width = 4)
cpts(m_binseg)
m_pelt <- cpt.mean(diff[2500:3199], penalty = "BIC", method = "PELT")
plot(m_pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
m_pm <- cpt.mean(diff[2500:3199], penalty = "Manual", pen.value = "1.5 * log(n)",
method = "PELT")
plot(m_pm, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
plot(m_pelt, type = "l", cpt.col = "blue", xlab = "Index", cpt.width = 4)
cpt_date = btc_hist$timestamp[2499] + cpts(m_binseg)
tweet_date = btc_hist %>% filter(tweet == TRUE) %>% select(timestamp)
as.data.frame(cpt_date)
View(elon)
length(elon$tweet)
strcount(elon$tweet)
str_count(elon$tweet)
?str_count
library(stringr)
library(stringr)
str_count(elon$tweet)
str_count(elon$tweet, "\\w+")
sum(str_count(elon$tweet, "\\w+"))
